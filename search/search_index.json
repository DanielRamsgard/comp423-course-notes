{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Daniel Ramsgard's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/rust-setup/","title":"Setting up a dev container for Rust","text":"<ul> <li>Primary author: Daniel Ramsgard</li> <li>Reviewer: Mani Pourfazli</li> </ul>"},{"location":"tutorials/rust-setup/#introduction","title":"Introduction","text":"<p>Welcome to your introduction to Rust! This tutorial will go over how to set up a Rust environment.</p>"},{"location":"tutorials/rust-setup/#prerequisites","title":"Prerequisites","text":""},{"location":"tutorials/rust-setup/#prerequisite-tools","title":"Prerequisite Tools","text":"<ol> <li>Docker Desktop</li> <li>VS Code</li> <li>Git</li> <li>A GitHub Account</li> </ol> <p>Note</p> <p>The following concepts are good to know but not strictly necessary to follow the tutorial: basic knowledge of Rust Syntax, basic proficiency of Git Commands, and Docker mental model.</p>"},{"location":"tutorials/rust-setup/#steps","title":"Steps","text":"<ul> <li>The reader is expected to run the Bash shell whether they are on MacOS, Linux, or Windows.</li> </ul>"},{"location":"tutorials/rust-setup/#diretory-setup","title":"Diretory Setup","text":"<ol> <li>Run the following command <code>mkdir &lt;name&gt;</code> to create a new project directory. Now, enter into that directory by executing <code>cd &lt;name&gt;</code>.</li> <li>Create a new public repo on GitHub, without adding a README.md file, and copy the repo URL.</li> <li>Run the following commands to initialize an empty Git repo locally: <pre><code>git init\ngit remote add origin &lt;GitHub repo URL&gt;\ngit fetch origin\ngit switch -c main\n</code></pre></li> </ol>"},{"location":"tutorials/rust-setup/#dev-container-configuration","title":"Dev Container Configuration","text":"<ol> <li>Create a new directory called <code>.devcontainer</code> and enter into it with the run the following command <code>mkdir .devcontainer &amp;&amp; cd .devcontainer</code>.</li> <li>Run the following command to configure the devcontainer setup: <pre><code>echo \"{\\n    \\\"name\\\": \\\"Rust Dev Container\\\",\\n    \\\"image\\\": \\\"mcr.microsoft.com/devcontainers/rust:latest\\\",\\n    \\\"customizations\\\": {\\n        \\\"vscode\\\": {\\n            \\\"settings\\\": {},\\n            \\\"extensions\\\": [\\n                \\\"rust-lang.rust-analyzer\\\"\\n            ]\\n        }\\n    }\\n}\" &gt; devcontainer.json\n</code></pre></li> <li>The <code>devcontainer.json</code> file specifies a Docker Image from a container registry. When you open a directory that has this configuration, VS Code will run the specified container on your machine, eliminating the \"it doesn't work on my machine\" issue. Commands are run inside the container, while you interact with files in VS Code on your computer and not insde the container.</li> </ol>"},{"location":"tutorials/rust-setup/#opening-in-vs-code","title":"Opening in VS Code","text":"<ol> <li>Run <code>cd ..</code> to return to the root directory of your project.</li> <li>If you have VS Code command line tools installed and in your PATH, you may run <code>code .</code>, which will open the working directory in VS Code. If you do not have VS Code command line tools installed, you may open the directory through the VS Code user-interface.</li> <li>VS Code should prompt you to open the Docker container associated with the file inside the <code>.devcontainer</code> directory. Follow the instructions to open the Docker container.</li> </ol>"},{"location":"tutorials/rust-setup/#compile-and-run","title":"Compile and run","text":"<ol> <li>Check the Rust version with the following command <code>rustc --version</code>.</li> <li>Create a new binary Rust project without new source control management files by executing the following command <code>cargo new my_project --vcs none</code>.</li> <li>Overwrite <code>my_project/src/main.rs</code> with the following code: <pre><code>fn main() {\n    println!(\"Hello COMP423\");\n}\n</code></pre></li> <li>Enter the project and compile the main file with the following command <code>cd my_project &amp;&amp; cargo build</code>.</li> <li>Run the main.rs file with the following command <code>cargo run</code>.</li> <li>You should now see the standard output: <code>Hello COMP423</code>.</li> </ol>"},{"location":"tutorials/rust-setup/#comparison-to-gcc","title":"Comparison to GCC","text":"<p><code>cargo build</code> is to Rust what <code>gcc -o my_program my_program.c</code> is to C. The build command creates an executable object file at the file path: <code>./target/debug/my_project</code>. Instead of executing the compiled Rust program with <code>cargo run</code>, you may also do <code>./target/debug/my_project</code>, similar to running a C program after compiling with GCC: <code>./my_program</code>.</p>"},{"location":"tutorials/rust-setup/#push-to-github","title":"Push to GitHub","text":"<ul> <li>Now execute the following commands to save your changes on GitHub: <pre><code>cd ..\necho \"Rust hello-world program tutorial link: \\`https://danielramsgard.github.io/comp423-course-notes/tutorials/rust-setup\\`.\" &gt; README.md\ngit add .\ngit commit -m \"my first commit. add README.md and Rust files\"\ngit push origin main\n</code></pre></li> </ul>"}]}